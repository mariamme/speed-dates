library(tidyverse)
library(shiny)
library(plotly)
library(shinydashboard)
library(rpart)
library("colorspace")
library(shinyWidgets)
library(fmsb)
library(gganimate)
library(ggrepel)
library(cowplot)
library(gifski)
load('speed_date.RData')
# Running Dog
img <- 'love.gif'

# Image Size
imgsize <- "auto 20%"



ui <- fluidPage(
  tags$head(tags$style(HTML('.js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {
                                                  background: #b68f9e;
                                                  border-top: 1px solid #b68f9e ;
                                                  border-bottom: 1px solid #b68f9e ;}'

  ))
  ),
  setSliderColor("#b68f9e",1),

  dashboardPage(
  dashboardHeader(title = "Speed Dating"),                   # Title of the dashboard
  dashboardSidebar( 
    conditionalPanel(condition="(input.tabselected==1)||(input.tabselected==2)||(input.tabselected==0)",
                     prettyCheckboxGroup(inputId = "gender",label= "Gender:",               # Element 1: gender selection
                       choices = list("female" = "female", 
                                      "male" = "male"),
                       selected = c("female", "male")),
    selectInput("age", "Age:", c('18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28'
                             ,'29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',
                             '42', '55',"all_ages"),
                selected = c('all_ages'),multiple= TRUE),    # Element 2: age selection
    selectInput("career", "Career:", append(levels(unique(speed_date$career)),"all_careers"),
                selected = "all_careers",
                multiple= TRUE),                             # Element 3: career selection
    selectInput("interest", "Interest:", append(levels(unique(speed_date$interest)),"all_interests"),
                selected = "all_interests",
                multiple= TRUE),                             # Element 4: interest selection
    sliderInput("income", "Income:",                      # Element 5: income selection
                min = 0, max = 109031, 
                value = c(0, 109031), step = 5, sep = "")
    ),
    conditionalPanel(condition="(input.tabselected==3)||(input.tabselected==4)",
                     selectInput("age_1", "Age:", c('18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28'
                                                  ,'29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',
                                                  '42', '55'),
                                 selected = c('21')),    # Element 2: age selection
                     selectInput("career_1", "Career:", levels(unique(speed_date$career)),
                                 selected = "Business"),                             # Element 3: career selection
                     selectInput("race_1", "Origin:", levels(unique(speed_date$race)),
                                 selected = "European/Caucasian-American"),
                     selectInput("interest_1", "Interest:", levels(unique(speed_date$interest)),
                                 selected = "sports")   )                         # Element 4: interest selection
                     
  ),

  dashboardBody(
 
singleton(tags$head(HTML("
<script type='text/javascript'>

/* When recalculating starts, show loading screen */
$(document).on('shiny:recalculating', function(event) {
$('div#divLoading').addClass('show');
});

/* When new value or error comes in, hide loading screen */
$(document).on('shiny:value shiny:error', function(event) {
$('div#divLoading').removeClass('show');
});

</script>"))),

# CSS Code
singleton(tags$head(HTML(paste0("
<style type='text/css'>
#divLoading
{
  display : none;
  }
  #divLoading.show
  {
  display : block;
  position : fixed;
  z-index: 100;
  background-image : url('",img,"');
  background-size:", imgsize, ";
  background-repeat : no-repeat;
  background-position : center;
  left : 0;
  bottom : 0;
  right : 0;
  top : 0;
  }
  #loadinggif.show
  {
  left : 50%;
  top : 50%;
  position : absolute;
  z-index : 101;
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
  width: 100%;
  margin-left : -16px;
  margin-top : -16px;
  }
  div.content {
  width : 1000px;
  height : 1000px;
  }
  
</style>")))),
    tags$body(HTML("<div id='divLoading'> </div>")),
    tabBox(
      title = img(src = "heart-icon.png", height = 30, width = 30), height = "920px", width = "400px",
      tabPanel("Scores",value=0,
               column(6,plotlyOutput("scores1_1", height = 250)),
               column(6,plotlyOutput("scores_o", height = 250)),
               column(6,plotlyOutput("scores3_1", height = 250)),
               column(6,valueBoxOutput("score_box", width = 300))
      ),
      tabPanel("Attractiveness",value=1,
               valueBoxOutput("att_box",width = 300),
               titlePanel(tags$p(HTML("Analysis of decisions by the characteristic: Attractive"), style = "font-size: 50%;font-family:Arial;text-align: center;font-weight:bold;")),
               plotOutput("att", height = 300)
               
      ),
      tabPanel("intelligence", value=2,
               valueBoxOutput("int_box",width = 300),
               titlePanel(tags$p(HTML("Analysis of decisions by the characteristic: Intelligent"), style = "font-size: 50%;font-family:Arial;text-align: center;font-weight:bold;")),
               plotOutput("int", height = 300)
               
      ),
      tabPanel(title="Match",value=3,tags$body(HTML("<div id='divLoading'> </div>")),fluidRow(
        column(6,tags$p(img(src = "love.jpg", height = 300, width = 300), style = "text-align: center; margin-right;")),
        column(6,infoBoxOutput("age_box", width = 8)),
        column(6,infoBoxOutput("race_box", width = 8)),
        column(6,infoBoxOutput("city_box", width = 8)),
        column(6,valueBoxOutput("exp_box",width = 300)),
        column(6,infoBoxOutput("interest_box", width = 8)),
        column(6,infoBoxOutput("career_box", width = 8))
        
        
               )
      ),
      tabPanel("Analysis",value=4,fluidRow(
        column(12,valueBoxOutput("exp_real_box",width = 300)),
        column(6,plotOutput("female", height =400)),
        column(6,plotOutput("male", height =400))
        
        
               
      )),
      id = "tabselected",
    
    tags$head(tags$style(HTML('
        /* logo */
        .skin-blue .main-header .logo {
                              background-color: #e6d6dc;
                              }

        /* logo when hovered */
        .skin-blue .main-header .logo:hover {
                              background-color: #e6d6dc;
                              }

        /* navbar (rest of the header) */
        .skin-blue .main-header .navbar {
                              background-color: #e6d6dc;
                              }        

        /* main sidebar */
        .skin-blue .main-sidebar {
                              background-color: #d9c1ca;
                              }

        /* active selected tab in the sidebarmenu */
        .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{
                              background-color: #d9c1ca;
                              }

        /* other links in the sidebarmenu */
        .skin-blue .main-sidebar .sidebar .sidebar-menu a{
                              background-color:#d9c1ca;
                              color: #000000;
                              }

        /* other links in the sidebarmenu when hovered */
         .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{
                              background-color: #d9c1ca;
                              }
        /* toggle button when hovered  */                    
         .skin-blue .main-header .navbar .sidebar-toggle:hover{
                              background-color: #d9c1ca;
         }
         .small-box.bg-black {height: 200px}
         .small-box.bg-black { background-color: #e6d6dc !important; color: #ffffff !important; }
         .small-box.bg-red { background-color: #e6d6dc !important; color: #ffffff !important; }
         .small-box.bg-red {height: 70px}
         .small-box.bg-orange {height: 300px}
         .small-box.bg-orange { background-color: #e6d6dc !important; color: #ffffff !important; }
         .nav-tabs-custom .nav-tabs li.active:hover a, .nav-tabs-custom .nav-tabs li.active a {
     background-color: #e6d6dc;
     border-color: #e6d6dc;
}

.nav-tabs-custom .nav-tabs li.active {
     border-top-color: #e6d6dc;
}
.pretty.p-default input:checked~.state label:before {
  background-color: #913c67 !important;
}
.pretty input~.state label:before, 
.pretty input~.state label:after {
  background-color:  #e6d6dc;
}
                              '))))
  
)))


speed_date<-speed_date%>%
  mutate( age_o=as.character(age_o))

p<-speed_date%>%filter(match==1)%>%select("age","career","race","interest","age_o")
p_train<- p%>%filter(!duplicated(p))
set.seed(7)
fit.age <- rpart( age_o~.,data=p_train, cp=0.001,maxdepth=4)


p<-speed_date%>%filter(match==1)%>%select("age","career","race","interest","race_o")
p_train<- p%>%filter(!duplicated(p))
set.seed(7)
fit.race <- rpart( race_o~.,data=p_train, cp=0.001,maxdepth=4)

p<-speed_date%>%filter(match==1)%>%select("age","career","race","interest","interest_o")
p_train<- p%>%filter(!duplicated(p))
set.seed(7)
fit.interest <- rpart( interest_o~.,data=p_train, cp=0.001,maxdepth=4)

p<-speed_date%>%filter(match==1)%>%select("age","career","race","interest","city_o")
p_train<- p%>%filter(!duplicated(p))
set.seed(7)
fit.city <- rpart( city_o~.,data=p_train, cp=0.001,maxdepth=4)

p<-speed_date%>%filter(match==1)%>%select("age","career","race","interest","career_o")
p_train<- p%>%filter(!duplicated(p))
set.seed(7)
fit.career <- rpart( career_o~.,data=p_train, cp=0.001,maxdepth=4)


server <- function(input, output){
 
  filtered_data <- reactive({                # Creates the dynamic data
    speed_date%>%
      filter(gender %in% input$gender,
             age_o %in%  (if (input$age=="all_ages"){c('18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28'
                                                               ,'29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',
                                                               '42', '55')} else {input$age}),
             career %in% (if (input$career=="all_careers"){c("Undecided","International/Humanitarian Affairs","Academic/Research","Business","law", "Engineer",
                                                            "Entertainment","Psychologist","Medicine","Real Estate","speech pathologist ","Architecture and design ",
                                                            "politics"," Lobbyist ","Energy "," Trade Specialist ","journalism","Pro sports/Athletics")}else{input$career}),
             income >= input$income[1], 
             income <= input$income[2],
             interest %in% (if(input$interest=="all_interests"){c("movies","sports","dining","yoga","reading","art","museums","music","clubbing", "tvsports","concerts",
                                                                 "theater","exercise", "hiking","gaming","tv","shopping")}else{input$interest})
              
  )})
  filtered_data_predict <- reactive({                # Creates the dynamic data
    age <- as.numeric(input$age_1)
    career <- input$career_1
    interest <- input$interest_1
    race<-input$race_1
    pred <- data.frame( age, career,race,interest)
  })
  
  output$scores1_1<-renderPlotly({
    Sys.sleep(0.35)
    filtered_data()%>%
      filter(question %in% c("attr1_1","sinc1_1","intel1_1","fun1_1","amb1_1"))%>%
      mutate (question= ifelse (question=="attr1_1","Attractive" ,question))%>%
      mutate (question= ifelse (question=="intel1_1","Intelligent" ,question))%>%
      mutate (question= ifelse (question=="sinc1_1","sincere" ,question))%>%
      mutate (question= ifelse (question=="fun1_1","Fun" ,question))%>%
      mutate (question= ifelse (question=="amb1_1","Ambitious" ,question))%>%
      group_by(question)%>%
      summarise(score=mean(score))%>%
      ggplot(aes(x=reorder(question,score),y=score))+geom_col(fill="#98426d",color="#913c67",alpha = 0.5)+coord_flip()+ggtitle("Scores prefered in the partner")+theme(plot.title = element_text(family="Arial",size=9,face="bold",hjust=5))+ ylab("score") + xlab("criteria")
    
  })
  
  output$scores_o<-renderPlotly({
    Sys.sleep(0.35)
    filtered_data()%>%
      filter(question %in% c("attr_o","sinc_o","intel_o","fun_o","amb_o"))%>%
      mutate (question= ifelse (question=="attr_o","Attractive" ,question))%>%
      mutate (question= ifelse (question=="intel_o","Intelligent" ,question))%>%
      mutate (question= ifelse (question=="sinc_o","sincere" ,question))%>%
      mutate (question= ifelse (question=="fun_o","Fun" ,question))%>%
      mutate (question= ifelse (question=="amb_o","Ambitious" ,question))%>%
      group_by(question)%>%
      summarise(n=mean(score))%>%
      ggplot(aes(x=reorder(question,n),y=n))+geom_col(fill="#98426d",color="#913c67",alpha = 0.5)+coord_flip()+ggtitle("Scores given by partner after the date")+theme(plot.title = element_text(family="Arial",size=9,face="bold",hjust=5))+ ylab("score") + xlab("criteria")
    
  })
  
  output$scores3_1<-renderPlotly({
    Sys.sleep(0.35)
    filtered_data()%>%
      filter(question %in% c("attr3_1","sinc3_1","intel3_1","fun3_1","amb3_1"))%>%
      mutate (question= ifelse (question=="attr3_1","Attractive" ,question))%>%
      mutate (question= ifelse (question=="intel3_1","Intelligent" ,question))%>%
      mutate (question= ifelse (question=="sinc3_1","sincere" ,question))%>%
      mutate (question= ifelse (question=="fun3_1","Fun" ,question))%>%
      mutate (question= ifelse (question=="amb3_1","Ambitious" ,question))%>%
      group_by(question)%>%
      summarise(n=mean(score))%>%
      ggplot(aes(x=reorder(question,n),y=n))+geom_col(fill="#98426d",color="#913c67",alpha = 0.5)+coord_flip()+ggtitle("Auto-attributed scores")+theme(plot.title = element_text(family="Arial",size=9,face="bold",hjust=5))+ ylab("score") + xlab("criteria")
    
  })
  output$score_box <- renderValueBox({
    Sys.sleep(0.15)
    valueBox(
      value = tags$p(HTML(" The three following graphs are dynamic charts describing:<br>
                            <br>
                            - Scores prefered in the partner: the criteria of a perfect <br>
                            partner viewed by people corresponding to the selected <br>
                            characteristics.<br>
                            <br>
                            - Scores given by partener after the date: The evaluation <br>
                            of the parteners to the people corresponding to the selected <br>
                            characteristics.<br>
                            <br>
                            - Auto-attributed scores: the way the people corresponding <br>
                            to the selected characteristics view themselves.<br>
                            <br>
                            Make sure you change the selected characteristics and view the <br>
                            results!
                           "), style = "font-size: 40%;") ,
      color="orange",
      subtitle=""
    )
  })
  
  output$att <- renderPlot({
    
    Sys.sleep(1)
    filtered_data() %>%
      filter(question=='attr_o')%>%
      group_by(iid,gender) %>%
      summarize(score=mean(score),positive_decisions=sum(decision))%>%
      ggplot(aes(x = score, y = positive_decisions,color=gender)) + geom_point(size=3)+scale_color_manual(values=c("#e31c62", "#b68f9e")) 
  })
    output$att_box <- renderValueBox({
    Sys.sleep(0.15)
    valueBox(
      value = tags$p(HTML("The following dynamic graph represents the Analysis of decisions by the 
                           characteristic Attractive: How does the score given by the  <br>
                           partners to the people corresponding to the selected characteristics 
                           affect their decisions after the date. <br>
                           It shows the importance of Attractiveness in getting 
                           a second date. <br>
                           "), style = "font-size: 40%;") ,
      color="red",
      subtitle=""
    )
  })
  
  output$int <- renderPlot({
    Sys.sleep(1)
    filtered_data() %>%
      filter(question=='intel_o')%>%
      group_by(iid,gender) %>%
      summarize(score=mean(score),positive_decisions=sum(decision))%>%
      ggplot(aes(x = score, y = positive_decisions,color=gender)) + geom_point(size=3)+scale_color_manual(values=c("#e31c62", "#b68f9e"))
  })
    output$int_box <- renderValueBox({
    Sys.sleep(0.15)
    valueBox(
      value = tags$p(HTML("The following dynamic graph represents the Analysis of decisions by the 
                           characteristic Intelligent: How does the score given by the  <br>
                           partners to the people corresponding to the selected characteristics 
                           affect their decisions after the date. <br>
                           It shows the importance of Intelligence in getting 
                           a second date. <br>
                           "), style = "font-size: 40%;") ,
      color="red",
      subtitle=""
    )
  })
  output$exp_box <- renderValueBox({
    Sys.sleep(0.15)
    valueBox(
      value = tags$p(HTML("The results displayed are the prediction of a match.<br>
                           <br>
                           Using a machine learning algorithm,This part shows the<br> 
                           characteristics of the perfect match to the people <br>
                           corresponding to the selected characteristics on the 
                           sidebar. <br>
                           <br>
                           Make sure you modify the input characteristics to be <br>
                           able to see some results ! <br>
                           <br>
                           Don't hesitate to select your personal characteristics to <br>
                           test the algorithm on yourself! <br>
                            <br>
                           "), style = "font-size: 40%;") ,
      color="black",
      subtitle=""
    )
  })

  
  output$age_box <- renderInfoBox({
    Sys.sleep(0.15)
    p<-filtered_data_predict()
    predictions<- predict(fit.age, p ,type="class")
    infoBox(
      value = predictions ,
      title = "Age", 
      icon = icon("user", lib = "font-awesome"),
      
      color = "maroon",
      width = 3
    )
  })
  
  output$race_box <- renderInfoBox({
    Sys.sleep(0.15)
    p<-filtered_data_predict()
    predictions<- predict(fit.race, p ,type="class")
    infoBox(
      value = predictions ,
      title = "Origin", 
      icon = icon("users", lib = "font-awesome"),
      color = "maroon",
      width = 3
    )
  })
  
  output$city_box <- renderInfoBox({
    Sys.sleep(0.15)
    p<-filtered_data_predict()
    predictions<- predict(fit.city, p ,type="class")
    infoBox(
      value = predictions ,
      title = "City", 
      icon = icon("map-marker-alt", lib = "font-awesome"),
      color = "maroon",
      width = 3
    )
  })
  
  output$interest_box <- renderInfoBox({
    Sys.sleep(0.15)
    p<-filtered_data_predict()
    predictions<- predict(fit.interest, p ,type="class")
    infoBox(
      value = predictions ,
      title = "Interest", 
      icon = icon("icons", lib = "font-awesome"),
      color = "maroon",
      width = 3
    )
  })
  
  output$career_box <- renderInfoBox({
    Sys.sleep(0.15)
    p<-filtered_data_predict()
    predictions<- predict(fit.career, p ,type="class")
    infoBox(
      value = predictions ,
      title = "Career", 
      icon = icon("user-tie", lib = "font-awesome"),
      color = "maroon",
      width = 3
    )
  })
  
  
  output$female<-renderPlot({
    maxmin <- data.frame(
      Attractive = c(35, 0),
      Sincere = c(35, 0),
      Intelligent = c(35, 0),
      Fun = c(35, 0),
      Ambitious = c(35, 0))
    a <- speed_date %>%filter(gender=="female")%>%
      filter(question %in% c("attr1_1","sinc1_1","intel1_1","fun1_1","amb1_1"))%>%
      pivot_wider(names_from = question,values_from=score)
    a[is.na(a)] <- 0
    a <- a%>%mutate(Attractive = mean(attr1_1), Sincere = mean(sinc1_1), Intelligent = mean(intel1_1), Fun = mean(fun1_1), Ambitious = mean(amb1_1))%>%select("Attractive" , "Sincere","Intelligent","Fun","Ambitious")
    a$attribute<-"actual value"
    a1 <- speed_date %>%filter(gender=="female")%>%
      filter(question %in% c("attr3_1","sinc3_1","intel3_1","fun3_1","amb3_1"))%>%
      pivot_wider(names_from = question,values_from=score)
    a1[is.na(a1)] <- 0
    a1 <- a1%>%mutate(Attractive = mean(attr3_1), Sincere = mean(sinc3_1), Intelligent = mean(intel3_1), Fun = mean(fun3_1), Ambitious = mean(amb3_1))%>%select("Attractive" , "Sincere","Intelligent","Fun","Ambitious")
    a1$attribute<-"prefered value"
    a<-rbind(a[1,],a1[1,])%>%select(-attribute)
    a <- rbind(maxmin,a)
    radarchart(a,
               title="Expectations and auto-measurements for females",
               pty = 32,
               axistype = 0,
               pcol = c(adjustcolor("#c199a8", 0.5), adjustcolor("#e31c62", 0.3)),
               pfcol = c(adjustcolor("#c199a8", 0.5), adjustcolor("#e31c62", 0.3)),
               plty = 1,
               plwd = 3,
               cglty = 1,
               cglcol = "gray88",
               centerzero = TRUE,
               seg = 5,
               vlcex = 0.75,
               palcex = 0.75) 
    legend("topright", 
           c("Expectations", "Auto-measure"),  
           fill = c(adjustcolor("#c199a8", 0.5), adjustcolor("#e31c62", 0.5)))
  })
  
  
  output$male<-renderPlot({
    maxmin <- data.frame(
      Attractive = c(35, 0),
      Sincere = c(35, 0),
      Intelligent = c(35, 0),
      Fun = c(35, 0),
      Ambitious = c(35, 0))
    a <- speed_date %>%filter(gender=="male")%>%
      filter(question %in% c("attr1_1","sinc1_1","intel1_1","fun1_1","amb1_1"))%>%
      pivot_wider(names_from = question,values_from=score)
    a[is.na(a)] <- 0
    a <- a%>%mutate(Attractive = mean(attr1_1), Sincere = mean(sinc1_1), Intelligent = mean(intel1_1), Fun = mean(fun1_1), Ambitious = mean(amb1_1))%>%select("Attractive" , "Sincere","Intelligent","Fun","Ambitious")
    a$attribute<-"actual value"
    a1 <- speed_date %>%filter(gender=="male")%>%
      filter(question %in% c("attr3_1","sinc3_1","intel3_1","fun3_1","amb3_1"))%>%
      pivot_wider(names_from = question,values_from=score)
    a1[is.na(a1)] <- 0
    a1 <- a1%>%mutate(Attractive = mean(attr3_1), Sincere = mean(sinc3_1), Intelligent = mean(intel3_1), Fun = mean(fun3_1), Ambitious = mean(amb3_1))%>%select("Attractive" , "Sincere","Intelligent","Fun","Ambitious")
    a1$attribute<-"prefered value"
    a<-rbind(a[1,],a1[1,])%>%select(-attribute)
    a <- rbind(maxmin,a)
    radarchart(a,
               title="Expectations and auto-measurements for males",
               pty = 32,
               axistype = 0,
               pcol = c(adjustcolor("#c199a8", 0.5), adjustcolor("#e31c62", 0.3)),
               pfcol = c(adjustcolor("#c199a8", 0.5), adjustcolor("#e31c62", 0.3)),
               plty = 1,
               plwd = 3,
               cglty = 1,
               cglcol = "gray88",
               centerzero = TRUE,
               seg = 5,
               vlcex = 0.75,
               palcex = 0.75) 
    legend("topright", 
           c("Expectations", "Auto-measure"),  
           fill = c(adjustcolor("#c199a8", 0.5), adjustcolor("#e31c62", 0.5)))
  })
  output$exp_real_box <- renderValueBox({
    Sys.sleep(0.15)
    valueBox(
      value = tags$p(HTML(" The following two static radar charts show the expectations and auto-measure of the scores
                            for every criteria for females and males: <br>
                            Expectations: what a person is looking for in a the perfect partner<br>
                            Auto-measures: How a person thinks he/she measures up <br>
                           "), style = "font-size: 40%;") ,
      color="red",
      subtitle=""
    )
  })

  }








# Run the app ----
shinyApp(ui = ui, server = server)
